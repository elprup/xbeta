{"id":1139,"date":"2010-09-15T09:00:23","date_gmt":"2010-09-15T01:00:23","guid":{"rendered":"http://xbeta.info/?p=1139"},"modified":"2010-09-15T09:00:23","modified_gmt":"2010-09-15T01:00:23","slug":"autohotkey_l","status":"publish","link":"https://xbeta.info/autohotkey_l.htm","title":{"rendered":"AutoHotkey_L：支持unicode, 能发送中文的AutoHotkey分支"},"content":{"rendered":"<p><img decoding=\"async\" src=\"http://www.autohotkey.com/docs/images/AutoHotkey_logo.gif\" alt=\"AutoHotkey\" style=\"float:left; margin-right:10px\">原版的 AutoHotkey 不支持 unicode ，给中文用户带来极大不便。比如，sendinput 输入中文时，必须借助剪贴板 或 <a href=\"http://jdev.tw/blog/1434/autohotkey-sendinput-asc\" title=\"改寫AutoHotkey輸出中文字串的寫法\">自定义函数</a>。</p>\n<p>幸运的是，开源软件再一次带来了奇迹：早在2008年就出现了支持 unicode 的 AutoHotkey 分支——由Lexikos维护的 <strong>AutoHotkey_L</strong>。</p>\n<h2>一、AutoHotkey_L 简介</h2>\n<p>AutoHotkey_L 是 AutoHotkey 的一个第三方分支版本，由 Lexikos 维护。主要增加和增强了对象、debug调试、unicode、64位、图标等功能。</p>\n<p>AutoHotkey_L主页：<a href=\"http://www.autohotkey.net/~Lexikos/AutoHotkey_L/\" title=\"AutoHotkey_L is a custom build of AutoHotkey\">http://www.autohotkey.net/~Lexikos/AutoHotkey_L/</a></p>\n<blockquote><p>\n<strong>== AutoHotkey_L 主要特征 ==</strong>：<br />\n* Objects (extensible associative arrays).<br />\n* Interactive debugging features, when used with a compatible debugging client.<br />\n* Significant functionality developed by other community members:<br />\n　　+ Native 64-bit support by fincs.<br />\n　　+ Native COM support by Sean.<br />\n　　+ <strong>Native Unicode support</strong> by jackieku.<br />\n　　+ Support for various text encodings.<br />\n　　+ New DllCall arg types for portability.<br />\n　　+ Object-oriented file I/O.<br />\n* #if expression &#8211; Similar to #IfWinActive, but for arbitrary expressions.<br />\n* Built-in support for menu icons and improvements to icon support.\n</p></blockquote>\n<h2>二、AutoHotkey_L 下载、安装、体验</h2>\n<p>* 选择合适版本进行下载，比如我在测试中选择了<a href=\"http://www.autohotkey.net/~Lexikos/AutoHotkey_L/AutoHotkey_Lw.zip\">Unicode x86</a> 。<br />\n* 将解压出的 AutoHotkey.exe 覆盖原来安装的AutoHotkey.exe。<br />\n* 新建一个 test.ahk ，注意：<strong>文件编码务必选用 utf-8</strong> 。<br />\n* 复制如下代码到 test.ahk</p>\n<blockquote><p>\n::test1:: 善用佳软。ひらがな 平仮名；カタカナ 片仮名。Korean/한국어/조선말。</p>\n<p>::test2::<br />\nsendinput, 善用佳软。ひらがな 平仮名；カタカナ 片仮名。Korean/한국어/조선말。<br />\nreturn\n</p></blockquote>\n<p>* 运行 test.ahk 。（此版本的AutoHotkey.exe系统托盘图标的H字符更加粗壮）<br />\n* 在任何能正常显示 unicode 字符的程序中（比如浏览器的地址栏），键入 test1 test2 应该都能上屏指定的文字，即 sendinput 与 hotstring 都支持中文（unicode）了。</p>\n<p><span style=\"color:red\">欢迎AutoHotkey爱好者分享此消息，也欢迎提供 AutoHotkey_L 其他功能的应用举例。</span><br />\n* 《<a href=\"http://blog.chenyi1976.com/blog/11200\">一键去掉Tweets中的所有“RT”字符</a>|陈轶的盛夏厅》：避免英文Windows下，StringReplace, clipboard ……含有中文时的乱码问题。<br />\n* 《<a href=\"http://hiforrest.blogbus.com/logs/65834873.html\">SuperMemo生词捕捉，词库制作工具：QArabbit</a>》：使用SuperMemo的朋友，欢迎使用AutoHotkey_L写的词库捕捉制作工具QARabbit</p>\n<h3>附：AutoHotkey_L 发现记</h3>\n<p>我在wordpress撰写或修改博文，一向是用gvim手写源代码。当然，<a href=\"http://www.appinn.com/gvim-ahk-tip/\">用 AutoHotkey 实现了一键操作</a>。但 AutoHotkey fileappend 创建的文件，fenc=cp936，偶尔会保存出错，显然不如utf-8格式方便。尽管知道AutoHotkey不支持unicode，但是否有奇迹能设定fenc呢？Google 『AutoHotkey fileappend utf-8』，第一条结果就见到 AutoHotkeyU，进入后发现，该分支已经合并到 AutoHotkey_L ，下载后测试『FileAppend, %clipboard%, %tmpfile%, UTF-8』成功，再试了上面的sendinput依然成功，于是，写出来与大家共享。</p>\n<p>当然，事后进一步搜索发现，http://ahk.5d6d.com/ 论坛上早就有关于 AutoHotkey_L 的讨论了。由此可知：①经常有人火星，所以，需要进一步分享。②凡事可以更乐观地搜索。</p>\n<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br />\n2010-09-14: 初稿。</iframe></p>\n","protected":false},"excerpt":{"rendered":"<p>原版的 AutoHotkey 不支持 unicode ，给中文用户带来极大不便。比如，sendinput 输入 [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":["未分类","系统工具"],"tags":["AutoHotkey","all"],"_links":{"self":[{"href":"https://xbeta.info/wp-json/wp/v2/posts/1139"}],"collection":[{"href":"https://xbeta.info/wp-json/wp/v2/posts"}],"about":[{"href":"https://xbeta.info/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://xbeta.info/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://xbeta.info/wp-json/wp/v2/comments?post=1139"}],"version-history":[{"count":0,"href":"https://xbeta.info/wp-json/wp/v2/posts/1139/revisions"}],"wp:attachment":[{"href":"https://xbeta.info/wp-json/wp/v2/media?parent=1139"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://xbeta.info/wp-json/wp/v2/categories?post=1139"},{"taxonomy":"post_tag","embeddable":true,"href":"https://xbeta.info/wp-json/wp/v2/tags?post=1139"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]},"wp_type":"post"}